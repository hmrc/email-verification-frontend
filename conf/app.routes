# microservice specific routes

GET         /assets/*file                              controllers.Assets.versioned(path = "/public", file: Asset)

->          /hmrc-frontend                             hmrcfrontend.Routes

GET         /verify                                    controllers.EmailVerificationController.verify(token : String)
GET         /error                                     controllers.ErrorController.showErrorPage

GET         /emailform                                 controllers.EmailPasscodeController.showEmailForm(continue: RedirectUrl)
POST        /emailform                                 controllers.EmailPasscodeController.submitEmailForm()
POST        /passcodeform                              controllers.EmailPasscodeController.submitPasscodeForm()

GET         /success                                   controllers.EmailPasscodeController.showSuccess(continue: RedirectUrl)
GET         /emailLimitReached                         controllers.EmailPasscodeController.showEmailLimitReached(continue: RedirectUrl)
GET         /emailAlreadyVerified                      controllers.EmailPasscodeController.showEmailAlreadyVerified(continue: RedirectUrl)
GET         /passcodeLimitReached                      controllers.EmailPasscodeController.showPasscodeLimitReached(continue: RedirectUrl)

GET         /journey/:journeyId/email                  controllers.JourneyController.enterEmail(journeyId, continueUrl: RedirectUrl, origin)
POST        /journey/:journeyId/email                  controllers.JourneyController.submitEmail(journeyId, continueUrl: RedirectUrl, origin)

POST        /journey/:journeyId/resend-passcode        controllers.JourneyController.resendPasscode(journeyId, continueUrl: RedirectUrl, origin)

GET         /journey/:journeyId/passcode               controllers.JourneyController.enterPasscode(journeyId, continueUrl: RedirectUrl, origin, requestedNew: Option[Boolean])
POST        /journey/:journeyId/passcode               controllers.JourneyController.submitPasscode(journeyId, continueUrl: RedirectUrl, origin)

GET         /keep-alive                                controllers.KeepAliveController.keepAlive()
GET         /timeout/:journeyId                        controllers.KeepAliveController.timeout(journeyId, continueUrl: RedirectUrl, origin)